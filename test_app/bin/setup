#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end


def command_exists?(command)
  system("command -v #{command} > /dev/null 2>&1")
end

# Install puma-dev if it's not installed

unless command_exists?('brew')
  puts "Homebrew is not installed. Please install Homebrew first."
  exit 1
end

unless command_exists?('puma-dev')
  puts "Installing puma-dev..."
  system('brew install puma/puma/puma-dev')

  puts "Running puma-dev setup..."
  system('sudo puma-dev -setup')

  puts "Installing puma-dev DNS settings..."
  system('puma-dev -install')
end

# Link the current app to puma-dev

puts "\n== Configuring Puma-dev to host https://app_name.test =="
app_name = File.basename(APP_ROOT)

system! "puma-dev link -n #{app_name}"
puts "puma-dev setup complete for #{app_name}.test"